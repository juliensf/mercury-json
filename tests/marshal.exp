 Orig. Term: -561
       JSON: -561
Result Term: -561

 Orig. Term: 0
       JSON: 0
Result Term: 0

 Orig. Term: 561
       JSON: 561
Result Term: 561

 Orig. Term: -128
       JSON: -128
Result Term: -128

 Orig. Term: 0
       JSON: 0
Result Term: 0

 Orig. Term: 127
       JSON: 127
Result Term: 127

 Orig. Term: -32768
       JSON: -32768
Result Term: -32768

 Orig. Term: 0
       JSON: 0
Result Term: 0

 Orig. Term: 32767
       JSON: 32767
Result Term: 32767

 Orig. Term: -2147483648
       JSON: -2147483648
Result Term: -2147483648

 Orig. Term: 0
       JSON: 0
Result Term: 0

 Orig. Term: 2147483647
       JSON: 2147483647
Result Term: 2147483647

 Orig. Term: -9223372036854775808
       JSON: "-9223372036854775808"
Result Term: -9223372036854775808

 Orig. Term: 0
       JSON: "0"
Result Term: 0

 Orig. Term: 9223372036854775807
       JSON: "9223372036854775807"
Result Term: 9223372036854775807

 Orig. Term: 0
       JSON: 0
Result Term: 0

 Orig. Term: 255
       JSON: 255
Result Term: 255

 Orig. Term: 0
       JSON: 0
Result Term: 0

 Orig. Term: 65535
       JSON: 65535
Result Term: 65535

 Orig. Term: 0
       JSON: "0"
Result Term: 0

 Orig. Term: 18446744073709551615
       JSON: "18446744073709551615"
Result Term: 18446744073709551615

 Orig. Term: 
       JSON: ""
Result Term: 

 Orig. Term: aaabbbccc
       JSON: "aaabbbccc"
Result Term: aaabbbccc

 Orig. Term: ûń
       JSON: "\u00FB\u0144"
Result Term: ûń

 Orig. Term: 3.141
       JSON: 3.141
Result Term: 3.141

 Orig. Term: infinity
       JSON: error: cannot convert non-finite float to JSON

 Orig. Term: A
       JSON: "A"
Result Term: A

 Orig. Term: no
       JSON: false
Result Term: no

 Orig. Term: yes
       JSON: true
Result Term: yes

 Orig. Term: 2365712637126347861237846728356712647827834723847812937812734871293478127
       JSON: "2365712637126347861237846728356712647827834723847812937812734871293478127"
Result Term: 2365712637126347861237846728356712647827834723847812937812734871293478127

 Orig. Term: r(i(15, [21, 4630, 9950, 14647, 2534, 6352, 4002, 681, 5412, 2318, 5306, 12818, 5991, 11613, 8931]), i(13, [52, 16132, 10881, 8565, 9578, 13071, 1765, 5004, 6489, 1357, 1960, 2678, 9373]))
       JSON: {"denom":"19823914719237911293810238918239182984120318293812381","numer":"2137491723578213491283472187358217348129357812374912873489123"}
Result Term: r(i(15, [21, 4630, 9950, 14647, 2534, 6352, 4002, 681, 5412, 2318, 5306, 12818, 5991, 11613, 8931]), i(13, [52, 16132, 10881, 8565, 9578, 13071, 1765, 5004, 6489, 1357, 1960, 2678, 9373]))

 Orig. Term: 2000-02-18 19:30:00
       JSON: "2000-02-18 19:30:00"
Result Term: 2000-02-18 19:30:00

 Orig. Term: 2013-03-02 20:30:11.000123
       JSON: "2013-03-02 20:30:11.000123"
Result Term: 2013-03-02 20:30:11.000123

 Orig. Term: P0D
       JSON: "P0D"
Result Term: P0D

 Orig. Term: [1, 2, 3]
       JSON: [1,2,3]
Result Term: [1, 2, 3]

 Orig. Term: apple
       JSON: "apple"
Result Term: apple

 Orig. Term: pear
       JSON: "pear"
Result Term: pear

 Orig. Term: [apple, orange, lemon, pear]
       JSON: ["apple","orange","lemon","pear"]
Result Term: [apple, orange, lemon, pear]

 Orig. Term: yes("foo")
       JSON: {"yes":"foo"}
Result Term: yes("foo")

 Orig. Term: no
       JSON: null
Result Term: no

 Orig. Term: yes(null)
       JSON: {"yes":null}
Result Term: yes(null)

 Orig. Term: ok(561)
       JSON: {"ok":561}
Result Term: ok(561)

 Orig. Term: ok(null)
       JSON: {"ok":null}
Result Term: ok(null)

 Orig. Term: error("this is an error")
       JSON: {"error":"this is an error"}
Result Term: error("this is an error")

 Orig. Term: error([1, 2, 3, 4])
       JSON: {"error":[1,2,3,4]}
Result Term: error([1, 2, 3, 4])

 Orig. Term: apple - orange
       JSON: {"fst":"apple","snd":"orange"}
Result Term: apple - orange

 Orig. Term: [1, 2, 3] - [apple, orange, pear]
       JSON: {"fst":[1,2,3],"snd":["apple","orange","pear"]}
Result Term: [1, 2, 3] - [apple, orange, pear]

 Orig. Term: sol([1, 2, 3, 4])
       JSON: [1,2,3,4]
Result Term: sol([1, 2, 3, 4])

 Orig. Term: sul([1, 1, 2, 2, 3, 3, 4, 4])
       JSON: [1,2,3,4]
Result Term: sul([4, 3, 2, 1])

 Orig. Term: two(3, three(1, 2, empty, empty, empty), two(4, empty, empty))
       JSON: [1,2,3,4]
Result Term: two(3, three(1, 2, empty, empty, empty), two(4, empty, empty))

 Orig. Term: ct(4, two(2, two(1, empty, empty), three(3, 4, empty, empty, empty)))
       JSON: [1,2,3,4]
Result Term: ct(4, two(3, three(1, 2, empty, empty, empty), two(4, empty, empty)))

 Orig. Term: tree(2, 4, tree(1, 1, empty, empty), tree(3, 2, empty, tree(4, 1, empty, empty)))
       JSON: [1,2,3,4]
Result Term: tree(3, 4, tree(2, 2, tree(1, 1, empty, empty), empty), tree(4, 1, empty, empty))

 Orig. Term: [apple - "Apple", orange - "Orange", lemon - "Lemon"]
       JSON: [{"fst":"apple","snd":"Apple"},{"fst":"orange","snd":"Orange"},{"fst":"lemon","snd":"Lemon"}]
Result Term: [apple - "Apple", orange - "Orange", lemon - "Lemon"]

 Orig. Term: kv_cons(apple, "Apple", kv_cons(orange, "Orange", kv_cons(lemon, "Lemon", kv_nil)))
       JSON: [{"key":"apple","value":"Apple"},{"key":"orange","value":"Orange"},{"key":"lemon","value":"Lemon"}]
Result Term: kv_cons(apple, "Apple", kv_cons(orange, "Orange", kv_cons(lemon, "Lemon", kv_nil)))

 Orig. Term: four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty)
       JSON: [{"key":"apple","value":"Apple"},{"key":"orange","value":"Orange"},{"key":"lemon","value":"Lemon"}]
Result Term: four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty)

 Orig. Term: black(orange, "Orange", red(apple, "Apple2", black(apple, "Apple3", red(apple, "Apple4", empty, empty), empty), black(apple, "Apple", empty, empty)), black(lemon, "Lemon", empty, empty))
       JSON: [{"key":"apple","value":"Apple4"},{"key":"apple","value":"Apple3"},{"key":"apple","value":"Apple2"},{"key":"apple","value":"Apple"},{"key":"orange","value":"Orange"},{"key":"lemon","value":"Lemon"}]
Result Term: black(orange, "Orange", red(apple, "Apple2", black(apple, "Apple3", red(apple, "Apple4", empty, empty), empty), black(apple, "Apple", empty, empty)), black(lemon, "Lemon", empty, empty))

 Orig. Term: bimap(four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty), four("Apple", apple, "Lemon", lemon, "Orange", orange, empty, empty, empty, empty))
       JSON: [{"key":"apple","value":"Apple"},{"key":"orange","value":"Orange"},{"key":"lemon","value":"Lemon"}]
Result Term: bimap(four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty), four("Apple", apple, "Lemon", lemon, "Orange", orange, empty, empty, empty, empty))

 Orig. Term: nonempty_cord(branch_node(list_node(1, [2, 3]), list_node(5, [6, 7])))
       JSON: [1,2,3,5,6,7]
Result Term: nonempty_cord(list_node(1, [2, 3, 5, 6, 7]))

 Orig. Term: array([])
       JSON: []
Result Term: array([])

 Orig. Term: array([pear, lemon, lemon, orange, apple])
       JSON: ["pear","lemon","lemon","orange","apple"]
Result Term: array([pear, lemon, lemon, orange, apple])

 Orig. Term: array2d(0, 0, array([]))
       JSON: []
Result Term: array2d(0, 0, array([]))

 Orig. Term: array2d(3, 3, array([apple, pear, apple, orange, apple, pear, pear, apple, orange]))
       JSON: [["apple","pear","apple"],["orange","apple","pear"],["pear","apple","orange"]]
Result Term: array2d(3, 3, array([apple, pear, apple, orange, apple, pear, pear, apple, orange]))

 Orig. Term: version_array([])
       JSON: []
Result Term: version_array([])

 Orig. Term: version_array([pear, lemon, lemon, orange, apple])
       JSON: ["pear","lemon","lemon","orange","apple"]
Result Term: version_array([pear, lemon, lemon, orange, apple])

 Orig. Term: "<24:10AFBD>"
       JSON: "<24:10AFBD>"
Result Term: "<24:10AFBD>"

 Orig. Term: [unit, unit, unit]
       JSON: ["unit","unit","unit"]
Result Term: [unit, unit, unit]

 Orig. Term: queue([], [2, 3, 5, 7, 11, 13, 17, 19, 23])
       JSON: [2,3,5,7,11,13,17,19,23]
Result Term: queue([], [2, 3, 5, 7, 11, 13, 17, 19, 23])

 Orig. Term: pqueue(3, 1, "D", pqueue(1, 491, "C", pqueue(0, 561, "A", empty, empty), empty), pqueue(0, 23, "B", empty, empty))
       JSON: [{"key":1,"value":"D"},{"key":23,"value":"B"},{"key":491,"value":"C"},{"key":561,"value":"A"}]
Result Term: pqueue(3, 1, "D", pqueue(1, 23, "B", pqueue(0, 561, "A", empty, empty), empty), pqueue(0, 491, "C", empty, empty))

 Orig. Term: digraph(4, bimap(two("B", digraph_key(1), two("A", digraph_key(0), empty, empty), three("C", digraph_key(2), "D", digraph_key(3), empty, empty, empty)), two(digraph_key(1), "B", two(digraph_key(0), "A", empty, empty), three(digraph_key(2), "C", digraph_key(3), "D", empty, empty, empty))), three(0, sparse_bitset([bitset_elem(0, 6u)]), 2, sparse_bitset([bitset_elem(0, 2u)]), empty, empty, empty), three(1, sparse_bitset([bitset_elem(0, 5u)]), 2, sparse_bitset([bitset_elem(0, 1u)]), empty, empty, empty))
       JSON: {"edges":[{"dest":"B","source":"A"},{"dest":"C","source":"A"},{"dest":"B","source":"C"}],"vertices":["A","B","C","D"]}
Result Term: digraph(4, bimap(two("B", digraph_key(1), two("A", digraph_key(0), empty, empty), three("C", digraph_key(2), "D", digraph_key(3), empty, empty, empty)), two(digraph_key(1), "B", two(digraph_key(0), "A", empty, empty), three(digraph_key(2), "C", digraph_key(3), "D", empty, empty, empty))), three(0, sparse_bitset([bitset_elem(0, 6u)]), 2, sparse_bitset([bitset_elem(0, 2u)]), empty, empty, empty), three(1, sparse_bitset([bitset_elem(0, 5u)]), 2, sparse_bitset([bitset_elem(0, 1u)]), empty, empty, empty))

 Orig. Term: bag(empty)
       JSON: []
Result Term: bag(empty)

 Orig. Term: bag(four(apple, 1, lemon, 3, pear, 2, empty, empty, empty, empty))
       JSON: [{"count":2,"value":"pear"},{"count":3,"value":"lemon"},{"count":1,"value":"apple"}]
Result Term: bag(four(apple, 1, lemon, 3, pear, 2, empty, empty, empty, empty))

 Orig. Term: [bool(yes), bool(no), null, number(5.61)]
       JSON: [true,false,null,5.61]
Result Term: [bool(yes), bool(no), null, number(5.61)]

 Orig. Term: pointer(["foo", "/bar", "12", "-", "~~~/"])
       JSON: "/foo/~1bar/12/-/~0~0~0~1"
Result Term: pointer(["foo", "/bar", "12", "-", "~~~/"])

to_string(null) = "null"
to_string(bool(no)) = "false"
to_string(bool(yes)) = "true"
to_string(number(0.0)) = "0"
to_string(number(-3.141)) = "-3.141"
to_string(number(3.141)) = "3.141"
to_string(string("")) = """"
to_string(string("foo")) = ""foo""
to_string(array([])) = "[]"
to_string(array([null, bool(yes), number(1.0), array([number(1.0)])])) = "[null,true,1,[1]]"
to_string(object(empty)) = "{}"
to_string(object(four("baaz", number(5.3), "bar", bool(yes), "foo", null, empty, empty, empty, empty))) = "{"baaz":5.3,"bar":true,"foo":null}"

from_string("null") = null
from_string("true") = bool(yes)
from_string("false") = bool(no)
from_string("3e2") = number(300.0)
from_string("3E2") = number(300.0)
from_string("3.141") = number(3.141)
from_string("0.0") = number(0.0)
from_string("-3.141") = number(-3.141)
from_string("-3e2") = number(-300.0)
from_string("-3E2") = number(-300.0)
from_string(""foo"") = string("foo")
from_string("   null") = null
from_string("[]") = array([])
from_string("[1.0, 2.0, 3.0]") = array([number(1.0), number(2.0), number(3.0)])
from_string("[null, true, 3.0]") = array([null, bool(yes), number(3.0)])
from_string("{}") = object(empty)
from_string("{"foo" : 3.0}") = object(two("foo", number(3.0), empty, empty))
from_string("{"foo" : -3e2}") = object(two("foo", number(-300.0), empty, empty))
from_string("{"foo" : true, "bar" : false}") = object(three("bar", bool(no), "foo", bool(yes), empty, empty, empty))

from_string("Null") <<FALSE>>
from_string("12.") <<FALSE>>
from_string("12e") <<FALSE>>
from_string("12E") <<FALSE>>
from_string(".12") <<FALSE>>
from_string("[1.0, 2.0") <<FALSE>>
from_string("{"foo" : }") <<FALSE>>
from_string("{}{}") <<FALSE>>
from_string("[1, 2, 3][") <<FALSE>>
from_string("[1, 2, 3]]") <<FALSE>>
from_string("nullnull") <<FALSE>>
from_string("true 1.23") <<FALSE>>
from_string("{ "a" : 12.3 } true") <<FALSE>>
