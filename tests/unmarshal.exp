JSON: null
TYPE: int
RESULT: ERROR: conversion to int: argument is null, expected number

JSON: "Hello"
TYPE: int
RESULT: ERROR: conversion to int: argument is string, expected number

JSON: null
TYPE: int8
RESULT: ERROR: conversion to int8: argument is null, expected number

JSON: "Hello"
TYPE: int8
RESULT: ERROR: conversion to int8: argument is string, expected number

JSON: -129
TYPE: int8
RESULT: ERROR: conversion to int8: number is out-of-bounds

JSON: -128
TYPE: int8
RESULT: OK: -128

JSON: 0
TYPE: int8
RESULT: OK: 0

JSON: 127
TYPE: int8
RESULT: OK: 127

JSON: 128
TYPE: int8
RESULT: ERROR: conversion to int8: number is out-of-bounds

JSON: [-1,0,1]
TYPE: list.list(int8)
RESULT: OK: [-1i8, 0i8, 1i8]

JSON: null
TYPE: int16
RESULT: ERROR: conversion to int16: argument is null, expected number

JSON: "Hello"
TYPE: int16
RESULT: ERROR: conversion to int16: argument is string, expected number

JSON: -32769
TYPE: int16
RESULT: ERROR: conversion to int16: number is out-of-bounds

JSON: -32768
TYPE: int16
RESULT: OK: -32768

JSON: 32767
TYPE: int16
RESULT: OK: 32767

JSON: 32768
TYPE: int16
RESULT: ERROR: conversion to int16: number is out-of-bounds

JSON: [-1,0,1]
TYPE: list.list(int16)
RESULT: OK: [-1i16, 0i16, 1i16]

JSON: null
TYPE: int32
RESULT: ERROR: conversion to int32: argument is null, expected number

JSON: "Hello"
TYPE: int32
RESULT: ERROR: conversion to int32: argument is string, expected number

JSON: -2147483649
TYPE: int32
RESULT: ERROR: conversion to int32: number is out-of-bounds

JSON: -2147483648
TYPE: int32
RESULT: OK: -2147483648

JSON: 2147483647
TYPE: int32
RESULT: OK: 2147483647

JSON: 2147483648
TYPE: int32
RESULT: ERROR: conversion to int32: number is out-of-bounds

JSON: [-1,0,1]
TYPE: list.list(int32)
RESULT: OK: [-1i32, 0i32, 1i32]

JSON: null
TYPE: int64
RESULT: ERROR: conversion to int64: argument is null, expected string

JSON: 561
TYPE: int64
RESULT: ERROR: conversion to int64: argument is number, expected string

JSON: "Hello"
TYPE: int64
RESULT: ERROR: conversion to int64: cannot convert string to int64

JSON: "-9223372036854775809"
TYPE: int64
RESULT: ERROR: conversion to int64: number is out-of-bounds

JSON: "-9223372036854775808"
TYPE: int64
RESULT: OK: -9223372036854775808

JSON: "9223372036854775807"
TYPE: int64
RESULT: OK: 9223372036854775807

JSON: "9223372036854775808"
TYPE: int64
RESULT: ERROR: conversion to int64: number is out-of-bounds

JSON: ["-1","0","1"]
TYPE: list.list(int64)
RESULT: OK: [-1i64, 0i64, 1i64]

JSON: null
TYPE: uint8
RESULT: ERROR: conversion to uint8: argument is null, expected number

JSON: "Hello"
TYPE: uint8
RESULT: ERROR: conversion to uint8: argument is string, expected number

JSON: -1
TYPE: uint8
RESULT: ERROR: conversion to uint8: number is out-of-bounds

JSON: 0
TYPE: uint8
RESULT: OK: 0

JSON: 255
TYPE: uint8
RESULT: OK: 255

JSON: 256
TYPE: uint8
RESULT: ERROR: conversion to uint8: number is out-of-bounds

JSON: [0,1,255]
TYPE: list.list(uint8)
RESULT: OK: [0u8, 1u8, 255u8]

JSON: null
TYPE: uint16
RESULT: ERROR: conversion to uint16: argument is null, expected number

JSON: "Hello"
TYPE: uint16
RESULT: ERROR: conversion to uint16: argument is string, expected number

JSON: -1
TYPE: uint16
RESULT: ERROR: conversion to uint16: number is out-of-bounds

JSON: 0
TYPE: uint16
RESULT: OK: 0

JSON: 32767
TYPE: uint16
RESULT: OK: 32767

JSON: 32768
TYPE: uint16
RESULT: OK: 32768

JSON: [0,1,32768]
TYPE: list.list(uint16)
RESULT: OK: [0u16, 1u16, 32768u16]

JSON: null
TYPE: uint64
RESULT: ERROR: conversion to uint64: argument is null, expected string

JSON: 561
TYPE: uint64
RESULT: ERROR: conversion to uint64: argument is number, expected string

JSON: "Hello"
TYPE: uint64
RESULT: ERROR: conversion to uint64: cannot convert string to uint64

JSON: "-1"
TYPE: uint64
RESULT: ERROR: conversion to uint64: number is out-of-bounds

JSON: "0"
TYPE: uint64
RESULT: OK: 0

JSON: "18446744073709551615"
TYPE: uint64
RESULT: OK: 18446744073709551615

JSON: "18446744073709551616"
TYPE: uint64
RESULT: ERROR: conversion to uint64: number is out-of-bounds

JSON: ["0","1"]
TYPE: list.list(uint64)
RESULT: OK: [0u64, 1u64]

JSON: null
TYPE: float
RESULT: ERROR: conversion to float: argument is null, expected number

JSON: "5.61"
TYPE: float
RESULT: ERROR: conversion to float: argument is string, expected number

JSON: infinity
TYPE: float
RESULT: ERROR: conversion to float: number is not finite

JSON: null
TYPE: character
RESULT: ERROR: conversion to character: argument is null, expected string

JSON: "AA"
TYPE: character
RESULT: ERROR: conversion to character: argument has length 2, expected length 1

JSON: ""
TYPE: character
RESULT: ERROR: conversion to character: argument has length 0, expected length 1

JSON: null
TYPE: string
RESULT: ERROR: conversion to string: argument is null, expected string

JSON: 5.61
TYPE: string
RESULT: ERROR: conversion to string: argument is number, expected string

JSON: []
TYPE: string
RESULT: ERROR: conversion to string: argument is array, expected string

JSON: ""
TYPE: string
RESULT: OK: 

JSON: "Hello"
TYPE: string
RESULT: OK: Hello

JSON: null
TYPE: bool.bool
RESULT: ERROR: conversion to bool.bool: argument is null, expected Boolean

JSON: "Hello"
TYPE: bool.bool
RESULT: ERROR: conversion to bool.bool: argument is string, expected Boolean

JSON: 5.61
TYPE: bool.bool
RESULT: ERROR: conversion to bool.bool: argument is number, expected Boolean

JSON: null
TYPE: integer.integer
RESULT: ERROR: conversion to integer.integer: argument is null, expected string

JSON: "Hello"
TYPE: integer.integer
RESULT: ERROR: conversion to integer.integer: cannot convert string to integer

JSON: "12345678912345678912346"
TYPE: integer.integer
RESULT: OK: 12345678912345678912346

JSON: "-123456789123456789123456"
TYPE: integer.integer
RESULT: OK: -123456789123456789123456

JSON: null
TYPE: bitmap.bitmap
RESULT: ERROR: conversion to bitmap.bitmap: argument is null, expected string

JSON: ""
TYPE: bitmap.bitmap
RESULT: ERROR: conversion to bitmap.bitmap: cannot convert string to bitmap

JSON: "---"
TYPE: bitmap.bitmap
RESULT: ERROR: conversion to bitmap.bitmap: cannot convert string to bitmap

JSON: "<24:10AFBD>"
TYPE: bitmap.bitmap
RESULT: OK: "<24:10AFBD>"

JSON: null
TYPE: list.list(int)
RESULT: ERROR: conversion to list.list(int): argument is null, expected array

JSON: []
TYPE: list.list(int)
RESULT: OK: []

JSON: [1]
TYPE: list.list(int)
RESULT: OK: [1]

JSON: [1,2]
TYPE: list.list(int)
RESULT: OK: [1, 2]

JSON: [10,null]
TYPE: list.list(int)
RESULT: ERROR: conversion to int: argument is null, expected number

JSON: null
TYPE: array.array(int)
RESULT: ERROR: conversion to array.array(int): argument is null, expected array

JSON: null
TYPE: array2d.array2d(int)
RESULT: ERROR: conversion to array2d.array2d(int): argument is null, expected array

JSON: []
TYPE: array2d.array2d(int)
RESULT: OK: array2d(0, 0, array([]))

JSON: [[],[]]
TYPE: array2d.array2d(int)
RESULT: OK: array2d(2, 0, array([]))

JSON: [[],null]
TYPE: array2d.array2d(int)
RESULT: ERROR: conversion to array2d.array2d(int): row 1 is null, expected array

JSON: [[],[3]]
TYPE: array2d.array2d(int)
RESULT: ERROR: conversion to array2d.array2d(int): row 0 has length 0, row 1 has length 1

JSON: [false,[3]]
TYPE: array2d.array2d(int)
RESULT: ERROR: conversion to array2d.array2d(int): row 0 is Boolean, expected array

JSON: [[1,2,3],[4,5,6],[7,8,9]]
TYPE: array2d.array2d(int)
RESULT: OK: array2d(3, 3, array([1, 2, 3, 4, 5, 6, 7, 8, 9]))

JSON: [[1],[2,3]]
TYPE: array2d.array2d(int)
RESULT: ERROR: conversion to array2d.array2d(int): row 1 has length 2, expected length 1

JSON: {"edges":[],"vertices":[]}
TYPE: digraph.digraph(string)
RESULT: OK: digraph(0u, bimap(empty, empty), empty, empty)

JSON: {"edges":[{"dest":"A","source":"C"}],"vertices":["A","B"]}
TYPE: digraph.digraph(string)
RESULT: ERROR: '"C"' is not in vertex set

JSON: {"edges":[{"dest":"C","source":"A"}],"vertices":["A","B"]}
TYPE: digraph.digraph(string)
RESULT: ERROR: '"C"' is not in vertex set

JSON: {"vertices":["A","B"]}
TYPE: digraph.digraph(string)
RESULT: ERROR: object is not a digraph/1

JSON: {"edges":[{"dest":"C","source":"A"}]}
TYPE: digraph.digraph(string)
RESULT: ERROR: object is not a digraph/1

JSON: null
TYPE: digraph.digraph(string)
RESULT: ERROR: conversion to digraph.digraph(string): argument is null, expected object

JSON: {"edges":[],"vertices":[null,"B"]}
TYPE: digraph.digraph(string)
RESULT: ERROR: conversion to string: argument is null, expected string

JSON: []
TYPE: tree234.tree234(int, int)
RESULT: OK: empty

JSON: {"bar":["c"],"foo":["a","b"]}
TYPE: tree234.tree234(string, list.list(string))
RESULT: ERROR: conversion to tree234.tree234(string, list.list(string)): argument is object, expected array

JSON: []
TYPE: bimap.bimap(int, int)
RESULT: OK: bimap(empty, empty)

JSON: {"bar":["c"],"foo":["a","b"]}
TYPE: bimap.bimap(string, list.list(string))
RESULT: ERROR: conversion to bimap.bimap(string, list.list(string)): argument is object, expected array

JSON: []
TYPE: rbtree.rbtree(int, int)
RESULT: OK: empty

JSON: {"bar":["c"],"foo":["a","b"]}
TYPE: rbtree.rbtree(string, list.list(string))
RESULT: ERROR: conversion to rbtree.rbtree(string, list.list(string)): argument is object, expected array

JSON: []
TYPE: one_or_more.one_or_more(string)
RESULT: ERROR: conversion to one_or_more.one_or_more(string): expected non-empty array

JSON: ["a"]
TYPE: one_or_more.one_or_more(string)
RESULT: OK: one_or_more("a", [])

JSON: ["a","b","c"]
TYPE: one_or_more.one_or_more(string)
RESULT: OK: one_or_more("a", ["b", "c"])

